# ig_line_bot_render.py
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage

import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import datetime
import os

# ---------------- LINE Ë®≠ÂÆö ----------------
ACCESS_TOKEN = "B799OHjuXJ9+mFFz53Jvlct37fZuOOv1eJq8yY4QZPOZ96GAAChnkrsJGPoGEF9gU4mjKXiZrMNl+FTegJYKH5hPctXrlVvjkbGkhUNDfj0q0DVf22B5or9azKw3DNpeERyJ7JhO5F/Wba9EnvW+GgdB04t89/1O/w1cDnyilFU="
SECRET = "22a7b9ed4003a08778308b10e7d0047a"

line_bot_api = LineBotApi(ACCESS_TOKEN)
handler = WebhookHandler(SECRET)

# ---------------- Instagram ÊäìÁ≤âÁµ≤ ----------------
def parse_followers(followers_str):
    followers_str = followers_str.replace(',', '').strip()
    if 'Ëê¨' in followers_str:
        return int(float(followers_str.replace('Ëê¨','')) * 10000)
    elif 'K' in followers_str:
        return int(float(followers_str.replace('K','')) * 1000)
    elif 'M' in followers_str:
        return int(float(followers_str.replace('M','')) * 1000000)
    else:
        return int(float(followers_str))

def get_followers(username):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/141.0.0.0 Safari/537.36"
    )

    driver = webdriver.Chrome(options=chrome_options)
    driver.get(f"https://www.instagram.com/{username}/")
    followers_element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, '//span[@title]'))
    )
    followers_count = followers_element.get_attribute("title")
    driver.quit()
    return parse_followers(followers_count)

def save_date(username, followers):
    today = datetime.date.today()
    try:
        df = pd.read_csv("followers.csv")
    except FileNotFoundError:
        df = pd.DataFrame(columns=["date", "username", "followers"])

    mask = (df["date"] == str(today)) & (df["username"] == username)
    if mask.any():
        df.loc[mask, "followers"] = followers
    else:
        new_row = pd.DataFrame([[str(today), username, followers]], columns=["date", "username", "followers"])
        df = pd.concat([df, new_row], ignore_index=True)

    df = df.drop_duplicates(subset=["date", "username"], keep="last")
    df.to_csv("followers.csv", index=False)

def get_difference(username, today_followers):
    try:
        df = pd.read_csv("followers.csv")
        df_user = df[df["username"] == username]
        if len(df_user) < 2:
            return "È¶ñÊ¨°Á¥ÄÈåÑÔºåÁÑ°Ê≥ïÊØîËºÉÊò®Êó•Ë≥áÊñô„ÄÇ"
        yesterday_followers = df_user.iloc[-2]["followers"]
        diff = today_followers - yesterday_followers
        if diff > 0:
            return f"ËºÉÊò®Êó•Â¢ûÂä† {diff} ‰ΩçÁ≤âÁµ≤ üéâ"
        elif diff < 0:
            return f"ËºÉÊò®Êó•Ê∏õÂ∞ë {-diff} ‰ΩçÁ≤âÁµ≤ üò¢"
        else:
            return "ËàáÊò®Êó•ÊåÅÂπ≥ üëç"
    except:
        return "ÁÑ°Ê≥ïÊØîËºÉÊò®Êó•Ë≥áÊñô"

# ---------------- LINE Webhook ----------------
app = Flask(__name__)

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    if text.lower() == "ÊäìÁ≤âÁµ≤":
        username = "the_firsttake"  # ÂèØÊîπÊàê‰Ω†Ë¶ÅÊäìÁöÑÂ∏≥Ëôü
        try:
            followers = get_followers(username)
            save_date(username, followers)
            diff_msg = get_difference(username, followers)
            reply = f"Â∏≥ËôüÔºö{username}\nÁ≤âÁµ≤Êï∏Ôºö{followers}\n{diff_msg}"
        except Exception as e:
            reply = f"ÊäìÂèñÂ§±ÊïóÔºö{e}"

        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
    else:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="Ë´ãÂÇ≥ 'ÊäìÁ≤âÁµ≤' ‰æÜÊü•Ë©¢Á≤âÁµ≤Êï∏„ÄÇ"))

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ---------------- Render ÈÉ®ÁΩ≤Ë®≠ÂÆö ----------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
